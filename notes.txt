TODO:

- [ ] metrikr
  - [ ] brainstorm which essential metrics should be covered
    - https://docs.sonarqube.org/latest/user-guide/metric-definitions/
    - Domains:
      - Complexity: complexity, cognitive_complexity
      - Coverage: coverage, uncovered_lines, tests
      - Maintainability: sqale_rating
      - Security: security_rating
      - Size: classes, ncloc, ncloc_language_distribution
  - [ ] create chart visualization strategy
  - [ ] create xlsx visualization strategy


- [ ] also consider to create tooling that:
  - lists classes with too many dependencies (i.e. only 5 deps allowed)
    - call that: god_object - metric
  - create tooling that generates dep graph based on projects


- [ ] sln creator
  1. dotnet new sln -n modules
  2. dotnet sln modules.sln add \modules\audit\src\Audit\Audit.csproj

  API
    dotnet run create-sln "modules" -i "C:\\work\\joint-forces\\joint-forces\\backend\\modules" -o "C:\\work\\joint-forces\\joint-forces\\backend"

----------------------------------------------------------------------------------------------------
APIs:

- SonarQube
  - https://sonar.alm.buhlergroup.com/web_api/api/measures

1. https://sonar.alm.buhlergroup.com/api/components/search?qualifiers=TRK
  - searches for projects

2. https://sonar.alm.buhlergroup.com/api/components/show?component=joint-forces-trending
  - searches for ??? based on a project

3. Metrics
  - https://sonar.alm.buhlergroup.com/api/metrics/search
    - lists all metrics

4. Measures
  - https://sonar.alm.buhlergroup.com/api/measures/component?component=joint-forces-trending&metricKeys=coverage,complexity,violations
    - lists measures based on a project and wanted metrics (metricKeys)


Workflows

=> Fetching SonarQube data
  1. Get all projects
    - https://sonar.alm.buhlergroup.com/api/components/search?qualifiers=TRK
  2. Get all metrics
    - https://sonar.alm.buhlergroup.com/api/metrics/search
  3. foreach wanted project
    - get wanted measures

=> Visualizing data
  1. load runs
  2. foreach project/module
    - load template
    - generate static chart data
    - store text
  3. save file (i.e. Module-Metrics.html)

CLI:
- metrikr new-run "pi-2201" -c config.json -k <my-sonarqube-apikey>

----------------------------------------------------------------------------------------------------
dotnet tool:

- dotnet tool list --global

- locally installing metrikr on a linux environment
- ./install.sh 1.1.0 r p

----------------------------------------------------------------------------------------------------
Links:

- cool chart libs
  - https://github.com/timqian/chart.xkcd
  - https://github.com/chartjs/Chart.js
  - https://gionkunz.github.io/chartist-js/

----------------------------------------------------------------------------------------------------
Tips:
- dotnet tool install --global dotnet-ef
- dotnet tool install --global dotnet-outdated-tool
  export PATH="$PATH:/home/vscode/.dotnet/tools"